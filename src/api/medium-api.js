export async function getMediumPosts() {
  /*
  TODO: RSS2Json is not return the post images.
  Returning a hard coded array os posts with all data for now.

  const mediumFeed = "https://medium.com/feed/@heitorpaceli";
  const rss2Json = "https://api.rss2json.com/v1/api.json";
  const response = await fetch(`${rss2Json}?rss_url=${mediumFeed}`);
  const json = await response.json();
  return json.items.map((post) => ({
    title: post.title,
    image: post.thumbnail,
    link: post.link,
    // Change to ISO format before, otherwise won't work in Safari
    date: new Date(post.pubDate.replace(" ", "T")),
    description: post.description,
  }));
  */

  return [
    {
      "title": "Exploring the new Android 13 Per-app Language preferences",
      "image": "https://cdn-images-1.medium.com/max/1024/0*9DZBXY_2idq1wJEi",
      "link": "https://proandroiddev.com/exploring-the-new-android-13-per-app-language-preferences-8d99b971b578?source=rss-43ce56dec559------2",
      "date": new Date("2022-03-02T07:54:59.000Z"),
      "description": "\n<p>How to use the new feature from Android 13 to display your app in a language different of the system one</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9DZBXY_2idq1wJEi\"><figcaption>Photo by <a href=\"https://unsplash.com/@wilhelmgunkel?utm_source=medium&amp;utm_medium=referral\">Wilhelm Gunkel</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Recently Google released the developer preview of <a href=\"https://developer.android.com/about/versions/13\">Android 13</a> — also known as <strong>Tiramisu</strong> — that introduces a new feature which developers have been waiting for a certain time: the <strong>Per-app language preferences</strong>.</p>\n<p>This new feature make it possible to run the application under locales that are not necessarily the same set at Android settings, providing a better experience for multilingual users. It allows applications to change the locale preferences at runtime using the newly introduced APIs.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/270/1*py9TOVOEpfDxgVsUpePEdA.gif\"><figcaption>Changing application locales at Runtime</figcaption></figure><p>This article will explain how to implement an app that uses the new Per-app language preferences.</p>\n<h3>App project</h3>\n<p>Once this feature was introduced in the <strong>Android 13 developer preview</strong>, make sure to set the right versions in the SDK configurations at your build.gradle.</p>\n<p>We set the minSdkPreview and targetSdkPreview to Tiramisu and compileSdkPreview to android-Tiramisu. You can see the complete build.gradle below:</p>\n<a href=\"https://medium.com/media/4ca49d72fd72626fbe237ecdc2d7c3df/href\">https://medium.com/media/4ca49d72fd72626fbe237ecdc2d7c3df/href</a><h3>Localized strings</h3>\n<p>Having the project created and configured, it’s time to add some localized text so we are able to see if the application language is really changing as expected.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9SfXo1bMjBf5_GYc\"><figcaption>Photo by <a href=\"https://unsplash.com/@krisetya?utm_source=medium&amp;utm_medium=referral\">Markus Krisetya</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>So let’s add a couple of locales to the application using the <strong>Android Studio’s Translations Editor</strong> as usual, and then adding a new string with our very famous sentence, <strong>Hello World</strong>,<strong> </strong>and its localized versions.</p>\n<p><em>I am using Google Translate to create the localized strings, so please forgive me if anything is not translated as expected.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8OgnmY00HV84hYyAj33mWQ.png\"><figcaption>Android Studio’s Translations Editor</figcaption></figure><h3>Locale Picker</h3>\n<p>Now that the application already have the localized text to be displayed to the user, we just need to provide a way that they can choose which language should be used while running our app.</p>\n<p>In order to do that, let’s create an Spinner with the supported locale tags and also an option to reset language preference and use system locale. Then set the Spinner’s onItemSelectedListener in order to call the code that actually changes the application language:</p>\n<a href=\"https://medium.com/media/79b27f9690b8ca673c0add6ce7372985/href\">https://medium.com/media/79b27f9690b8ca673c0add6ce7372985/href</a><h3>Changing App’s Locale</h3>\n<p>In order to change current application’s locale we need to obtain an instance of LocaleManager using the getSystemService method from Context class. Then create a new LocaleList with the new locales that must be used by the application and pass it as argument to setApplicationLocales.</p>\n<pre><strong>Note</strong>: <a href=\"https://developer.android.com/reference/android/os/LocaleList\">LocaleList</a> is a class available in Android SDK. It is not the same as a <a href=\"https://developer.android.com/reference/java/util/List\">List</a> of <a href=\"https://developer.android.com/reference/java/util/Locale\">Locale</a> instances.</pre>\n<a href=\"https://medium.com/media/ff145d6049930522ea3e6a5480556faa/href\">https://medium.com/media/ff145d6049930522ea3e6a5480556faa/href</a><p>To reset application locales and use the system’s one, pass an empty LocaleList that can be obtained by calling <a href=\"https://developer.android.com/reference/android/os/LocaleList#getEmptyLocaleList()\">LocaleList#getEmptyLocaleList()</a>.</p>\n<p>Calling getApplicationLocales will return the list of locales that are currently set for the application. Let’s use it to update the activity’s title with the display name of the current locale:</p>\n<a href=\"https://medium.com/media/a794fd36afb3f311e2072fb338d536d2/href\">https://medium.com/media/a794fd36afb3f311e2072fb338d536d2/href</a><p>Now the application is ready. You can find the complete activity’s code below:</p>\n<a href=\"https://medium.com/media/dfdcb799bff5cc663e69dea96fa2e2a8/href\">https://medium.com/media/dfdcb799bff5cc663e69dea96fa2e2a8/href</a><h3>Conclusion</h3>\n<p>You can read more about this feature at its <a href=\"https://developer.android.com/about/versions/13/features/app-languages\">Android developers</a> page.</p>\n<p>Please be aware that it is still under developer preview phase and it may be modified or removed at the final version. I’ll be updating the <a href=\"https://github.com/heitorpaceli/android-per-app-language\">GitHub repository</a> with any changes that may be required when the final version is released.</p>\n<p><em>If you find this article helpful, please don’t forget to clap. I would also appreciate your feedback in the comments section. Thanks!</em></p>\n<p><a href=\"https://github.com/heitorpaceli/android-per-app-language\">GitHub - heitorpaceli/android-per-app-language: Playing with new Android 13 feature (per-app language preferences) https://developer.android.com/about/versions/13/features/app-languages</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8d99b971b578\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://proandroiddev.com/exploring-the-new-android-13-per-app-language-preferences-8d99b971b578\">Exploring the new Android 13 Per-app Language preferences</a> was originally published in <a href=\"https://proandroiddev.com/\">ProAndroidDev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n"
    },
    {
      "title": "The definitive guide of Android UI Automator with Kotlin",
      "image": "https://cdn-images-1.medium.com/max/1024/0*hGnXwEM74apdrJ1y",
      "link": "https://proandroiddev.com/the-definitive-guide-of-android-ui-automator-with-kotlin-2eab40edab0d?source=rss-43ce56dec559------2",
      "date": new Date("2021-07-10T22:53:01.000Z"),
      "description": "\n<p>How to write automated test scripts for Android apps even without access to the applications source code</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hGnXwEM74apdrJ1y\"><figcaption>Photo by <a href=\"https://unsplash.com/@czapp_arpad?utm_source=medium&amp;utm_medium=referral\">Árpád Czapp</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Automation is a key point of Software Testing once it make possible to reproduce test steps as many times as needed, across the different software versions, which can be tedious to be done manually and very error prone once it is likely to a human to forget to perform some required set up or misunderstand some test step, resulting in invalid results.</p>\n<p>This article will explain how to write an UI Automator script to automatically test any Android application. We will write a simple test for the Android Settings app that adds a Wi-Fi network and check if the device is able to connect to it.</p>\n<figure><img alt=\"Execution of UI Automator script\" src=\"https://cdn-images-1.medium.com/max/227/1*EHNhAFQapgLz6CCK8up3jA.gif\"><figcaption>Execution of UI Automator script</figcaption></figure><p><em>The example from this article was written using an Android Virtual Device with the system image </em><strong><em>R API level 30 ABI x86 target Android 11 (Google Play)</em></strong><em>. You can use any image with </em><strong><em>Android 4.3 (API level 18) or higher</em></strong><em> and adapt the code according to its UI.</em></p>\n<h3>UI Automator</h3>\n<p><a href=\"https://developer.android.com/training/testing/ui-automator\">UI Automator</a> is an Android testing framework that allows us to write scripts that can interact to any application installed in the device. UI Automator doesn’t require having access to the application source code to work. Because of that, the script can navigate and interact with the application tray, Settings application, third party applications or any other app you want to.</p>\n<h3>Creating the project</h3>\n<p>Create a new Project on Android Studio with no activity and minimum <strong>SDK 18 or higher</strong>. The Android Studio will create three different <a href=\"https://developer.android.com/studio/build/build-variants#sourcesets\">source sets</a> in the project: main, androidTest and test. This is the default project structure in which main contains the application code, the test contains the unit tests that runs on the development machine and androidTest that is were the instrumented tests, like UI Automator ones, go by default.</p>\n<figure><img alt=\"Source sets in Android Studio project\" src=\"https://cdn-images-1.medium.com/max/390/1*868AOc0AO1ZdBqgXf2nvJw.png\"><figcaption>Source sets in Android Studio project</figcaption></figure><p>If you are writing you scripts in the same project of your application, then you can just create your scripts inside androidTest directory, but in this article we are creating a project with UI Automator scripts only, to test another application which we don’t have access to its source code, so we will make some changes before starting it.</p>\n<p>Open the build.gradle of the app module and add the following code inside android block:</p>\n<a href=\"https://medium.com/media/6160e887aa65d816ffb90b185a90e797/href\">https://medium.com/media/6160e887aa65d816ffb90b185a90e797/href</a><p>This will change the directory of our instrumented tests to the main directory. Now you can delete both test and androidTest source sets. Also delete some resources that will no longer be used:</p>\n<pre>app/src/main/res/values/themes.xml<br>app/src/main/res/values-night/themes.xml<br>app/src/main/res/values/colors.xml</pre>\n<p>With our source sets configured, let’s add the required dependencies. Once our scripts are part of the main source set, we need to add the dependencies using implementation instead of androidTestImplementation. Also you can remove dependencies that will not be used:</p>\n<a href=\"https://medium.com/media/430ddeab16e01ad5c0cfed98293a771c/href\">https://medium.com/media/430ddeab16e01ad5c0cfed98293a771c/href</a><p>After the change this is how your build.gradle will look like:</p>\n<a href=\"https://medium.com/media/460b0cf1aeeca56a1d019e0b6097c4c5/href\">https://medium.com/media/460b0cf1aeeca56a1d019e0b6097c4c5/href</a><p>We are almost done configuring the project, we just need to modify the AndroidManifest.xml in order to remove reference to the deleted files and add the instrumentation. Open the manifest file and remove the theme atribute from application tag once we deleted theme XML files previously.</p>\n<p>Once we are creating the scripts in the main source set, we need to manually add the instrumentation tag to the manifest files. Add the instrumentation inside the manifest tag with the name and targetPackage attributes. The name must be defined as androidx.test.runner.AndroidJUnitRunner and the targetPackage must be the same package of your application (which is com.paceli.wifitest, in this example).</p>\n<p>You can see the AndroidManifest.xml with the changes below:</p>\n<a href=\"https://medium.com/media/5fcf33970d97695d310c0a7ec224b46c/href\">https://medium.com/media/5fcf33970d97695d310c0a7ec224b46c/href</a><h3>Writing our script</h3>\n<p>Having created and configured the project, we are good to proceed creating our first script. Create a new class and add the annotation @RunWith(AndroidJUnit4::class) in order to define AndroidJUnit4 as the test runner.</p>\n<p>As usual in JUnit, the test methods must be annotated with @Test. Set up and tear down methods must be annotated with @Before and @After respectively. For those who are not familiar with this approach, the code below shows the order that the methods are executed:</p>\n<a href=\"https://medium.com/media/408e9dc7c528c94fc713c8d0b8f045aa/href\">https://medium.com/media/408e9dc7c528c94fc713c8d0b8f045aa/href</a><p>Running this example will produce the following logcat output:</p>\n<pre>Before Class<br>Before<br>Test<br>After<br>After Class</pre>\n<p>So let’s create a method named validateWifi in out test class and annotate it with @Test. In order to click on buttons, read text from screen, perform swipe gestures, and any other interaction with the UI, we need to get an instance of the <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiDevice\">UiDevice</a> class. To achieve that, we declared a property to the class and added the init block with the code to get an instance. This is how our class is looking at this moment:</p>\n<a href=\"https://medium.com/media/a52f45c5502d87ba47b0947a1b394908/href\">https://medium.com/media/a52f45c5502d87ba47b0947a1b394908/href</a><p>To interact with the elements from the screen, we need to get a reference to them using the <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiDevice\">UiDevice</a> instance. To do that, we will call the method <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiDevice#findobject_1\">findObject</a> passing the properties of the element we want to interact with. Some properties, like the text, are visible to the user, but there are several others that we cannot see on the device screen, so we need to dump the screen using the <strong>UI Automator Viewer </strong>tool that is available in the Android SDK at $ANDROID_HOME/tools/bin/uiautomatorviewer.</p>\n<figure><img alt=\"UI Automator Viewer screen\" src=\"https://cdn-images-1.medium.com/max/1024/1*31yZ6Ht90vfXpC4kCS7Xcg.png\"><figcaption>UI Automator Viewer</figcaption></figure><p>By clicking on the Device Screenshot button on the top left, the tool will show a screenshot and the dump of the screen currently displayed from the device connected to <strong>ADB</strong>. The elements can be chosen by clicking on them at the screenshot or at hierarchy view on the right side. Properties like index, text, content-desc, enabled, etc. are displayed in the Node detail view and.</p>\n<p>The <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiObject2\">UiObject2</a> class represents the elements from screen and an instance of it is returned by the <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiDevice#findobject_1\">findObject</a> method. In order to launch the Settings app, the user need to perform a scroll gesture on home screen to launch the applications list, and then click on Settings icon. So we obtained an instance of <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiObject2\">UiObject2</a> representing the workspace and another one for the Settings icon in the apps list screen, and then call the methods <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiObject2#scroll\">scroll</a> and <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiObject2#click\">click</a> respectively.</p>\n<a href=\"https://medium.com/media/71401b90d9f3c470ff6e58638a9126aa/href\">https://medium.com/media/71401b90d9f3c470ff6e58638a9126aa/href</a><p>If some element takes some time to be displayed in the screen, we can use the method <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiDevice#wait\">wait</a> instead of the <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiDevice#findobject_1\">findObject</a>. This method receives a <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/SearchCondition\">SearchCondition</a> and a timeout. Let’s use this approach to open the Network &amp; internet section and then proceed up to the Add network screen.</p>\n<a href=\"https://medium.com/media/d563ad512d2e656beba1c3bcee313af8/href\">https://medium.com/media/d563ad512d2e656beba1c3bcee313af8/href</a><p>In the Add network screen, there is a text field where the user must input the network SSID. To input text in a UI Automator script we just need to obtain the <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiObject2\">UiObject2</a> instance of this field and call the <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/UiObject2#settext\">setText</a> passing the string we want to input.</p>\n<figure><img alt=\"Add network screen\" src=\"https://cdn-images-1.medium.com/max/1024/1*s7nvYgZqfV_i8NvZH3-90g.png\"><figcaption>Add network</figcaption></figure><p>We will input the default name of Wi-Fi network in <strong>Android Virtual Device </strong>AndroidWifi (update accordingly to your needs) and then click on <strong>Save</strong> button to add it.</p>\n<a href=\"https://medium.com/media/0ba9a20ce00a3aab941e44c9e3a354eb/href\">https://medium.com/media/0ba9a20ce00a3aab941e44c9e3a354eb/href</a><p>If everything went right, now the added Wi-Fi network must be listed in the the list of networks and the Android device must be connected to it (for simplicity’s sake, we are assuming there is no other saved Wi-Fi network before running this test).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SB2lYcgPI0-evYf1qCKGmg.png\"><figcaption>Android connected to Wi-Fi</figcaption></figure><p>In order to check if the Wi-Fi was correctly added and the Android device is connected to it, we can simply check if the word Connected is displayed below the network we just added. To do that let’s use the method <a href=\"https://developer.android.com/reference/androidx/test/uiautomator/Until#hasobject\">hasObject</a> that returns a boolean indicating whether some element is currently being displayed on screen.</p>\n<a href=\"https://medium.com/media/abf80269db7466b4262c5fc1e08c7906/href\">https://medium.com/media/abf80269db7466b4262c5fc1e08c7906/href</a><p>We also have the option to use the Android APIs in order to get the SSID of current Wi-Fi the device is connected to. This is possible because the UI Automator script is installed as an Android application, so it has access to the APIs commonly used during applications development like intents, system services, contexts, etc.</p>\n<p>To be able to get the Wi-Fi SSID, add these permissions to the AndroidManifest.xml:</p>\n<pre>&lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt;<br>&lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;<br>&lt;uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" /&gt;</pre>\n<p>The following method get the <a href=\"https://developer.android.com/reference/android/content/Context\">Context</a> of the application (UI Automator script) and use it to get an instance of <a href=\"https://developer.android.com/reference/android/net/wifi/WifiManager\">WifiManager</a> and obtain the Wi-Fi SSID. We will use the return value to compare to the name of the network we added before.</p>\n<a href=\"https://medium.com/media/c1a8c9898f5032d0e05e393447f33465/href\">https://medium.com/media/c1a8c9898f5032d0e05e393447f33465/href</a><p>Now the test method is ready. It will look like this:</p>\n<a href=\"https://medium.com/media/a23848b6bdffa7e44ddb6721c58954ff/href\">https://medium.com/media/a23848b6bdffa7e44ddb6721c58954ff/href</a><p>To have a complete test script, we need to perform some set up before the actual test is executed. If you tried running the script while the screen was other than the home screen, you noticed that a NullPointerException occurs. That happens because we assumed the device was in the home screen when the test starts. In order to guarantee that, add the following set up method with the @Before annotation.</p>\n<a href=\"https://medium.com/media/ea0a9c31a5ca29c21a4f5fdd43da44bd/href\">https://medium.com/media/ea0a9c31a5ca29c21a4f5fdd43da44bd/href</a><p>Now the Home key will always be pressed before running the test. You may want to return to home screen after after the test execution as well, to do that simply add another method with the @After annotation similar to what we did with the set up method.</p>\n<a href=\"https://medium.com/media/dda75fb13e83300d816e95e3f9730cb6/href\">https://medium.com/media/dda75fb13e83300d816e95e3f9730cb6/href</a><p>In summary set up methods are used to make sure that the device is in an required initial state. Tear down methods are responsible to perform a clean up after running the test in order to not influence the subsequent ones. Let’s suppose you are writing a script that adds a password to the device. This password must be removed on the tear down method, otherwise next scripts may be stuck in password screen.</p>\n<h3>Running the script using ADB</h3>\n<p>Once you created the scripts you probably may want to execute them outside Android Studio. To do that you need to build .apk file, install it on Android device and execute the test using ADB.</p>\n<p>To build the .apk you can simply go to Build -&gt; Make Project on Android Studio, or run the Gradle command:</p>\n<pre># On Linux<br>./gradlew assembleDebug</pre>\n<pre># On Windows<br>gradlew.bat assembleDebug</pre>\n<p>The .apk with the scripts will be available at app/build/outputs/apk/debug (<strong>app</strong> is the module’s name). With the .apk built, install it like any other application with the command:</p>\n<pre>adb install -r -g app-debug.apk</pre>\n<p>Finally, start the execution by running the following command:</p>\n<pre>adb shell am instrument -w -e class 'com.paceli.wifitest.WifiTest' com.paceli.wifitest/androidx.test.runner.AndroidJUnitRunner</pre>\n<p><strong>com.paceli.wifitest.WifiTest </strong>— is the class name of the test script to be executed.<br><strong>com.paceli.wifitest/androidx.test.runner.AndroidJUnitRunner</strong> — is the test package name and the runner class in the format &lt;test_package_name&gt;/&lt;runner_class&gt; .</p>\n<p>See more details in the <a href=\"https://developer.android.com/studio/test/command-line#RunTestsDevice\">official documentation</a>.</p>\n<h3>Conclusion</h3>\n<p>This is is how we create a UI Automator test script with no access to the application source code. I hope this article may have helped you creating your own test scripts, improving test coverage for you application and reducing manual effort.</p>\n<p>The full project with the code presented in this article is available in this <a href=\"https://github.com/heitorpaceli/ui-automator-guide\">GitHub repository</a>. Fell free to clone and modify it according to your needs. A good exercise may be to modify the code in order to launch the Wi-Fi activity directly, using intents, reducing the execution time, or to modify the set up ensuring that there isn’t any saved network before running the test. It’s up to you.</p>\n<p><em>If you find this article helpful, please don’t forget to clap. I would also appreciate your feedback in the comments section. Thanks!</em></p>\n<p><a href=\"https://github.com/heitorpaceli/ui-automator-guide.git\">heitorpaceli/ui-automator-guide</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2eab40edab0d\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://proandroiddev.com/the-definitive-guide-of-android-ui-automator-with-kotlin-2eab40edab0d\">The definitive guide of Android UI Automator with Kotlin</a> was originally published in <a href=\"https://proandroiddev.com/\">ProAndroidDev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n"
    }
  ];
}
